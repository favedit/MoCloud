<?xml version="1.0" encoding="UTF-8"?>
<Template _uuid="hkrhP[5JxdOf0uasmni6qA" name="database.logicunit.javaClass" is_valid="Y" note="M#">
  <Define _uuid="FkkTv7mfZs67WunaYieZnQ" name="package" is_valid="Y" note="M#" value="org.mobj.mylife.data.base" />
  <Define _uuid="F0bD2[qAKTsg4Vwy2CZRrQ" name="type_from" is_valid="Y" note="M#" value="Boolean|Date|Float|Integer|Long|String" />
  <Define _uuid="BUNrk5GnKr9yTg1qFBIZqg" name="type_to" is_valid="Y" note="M#" value="boolean|Date|int|int|long|String" />
  <Source _uuid="9UHnkQ4s1xb2ZeHWRppfmQ" is_valid="Y" note="M#"><![CDATA[/*
 * @(#)F<jt:item source='$package.class_name'/>Impl.java
 *
 * Copyright 2008 microbject, All Rights Reserved.
 *
 */
package org.mobj.logic.data.impl;

import org.mobj.com.data.ESqlDataDirection;
import org.mobj.com.data.ESqlDataType;
import org.mobj.com.data.FAbstractSqlConnect;
import org.mobj.com.data.FSqlFunction;
import org.mobj.com.data.FSqlProcedure;
import org.mobj.com.data.ISqlConnect;
import org.mobj.data.logicunit.common.FAbstractLogicUnit;
import org.mobj.logic.data.I<jt:item source='$package.name' format='class'/>;

/**
 * <T>数据库逻辑包(<jt:item source='$package.name'/>)的代理对象</T>
 *
 * @author MAOCY
 * @version 1.0.1
 */
public class F<jt:item source='$package.class_name'/>Impl
      extends FAbstractLogicUnit
      implements
         I<jt:item source='$package.name' format='class'/>{

   public final String LOGIC_NAME = "<jt:item source='$package.name'/>";

   public F<jt:item source='$package.class_name'/>Impl(){
   }

   public F<jt:item source='$package.class_name'/>Impl(ISqlConnect connect){
      super(connect);
   }

<jt:loop source='$methods' alias='method' filter='$method.has_unknown=N'>
<jt:equals source='$method.type' value='function'>
   /* (non-Javadoc)
    * @see org.mobj.logic.data.I<jt:item source='$package.name' format='class'/>(<jt:loop source='$method#Parameters' alias='parameter'>java.lang.Object<jt:position source='$parameter' type='last' elseValue=', '/></jt:loop>)
    */
   @Override
   public FSqlFunction <jt:item source='$method.name' format='method'/>(<jt:hasItem source='$method#Parameters' notValue='){'>
<jt:loop source='$method#Parameters' alias='parameter'>
         Object <jt:item source='$parameter.name' format='method'/><jt:position source='$parameter' type='last' value='){' elseValue=','/>
</jt:loop></jt:hasItem>
      FSqlFunction function = new FSqlFunction("<jt:item source='$method.name'/>");
      function.setLogicName(LOGIC_NAME);
<jt:loop source='$method#Parameters' alias='parameter'>
      function.createParameter("<jt:item source='$parameter.name'/>", <jt:item source='$parameter.name' format='method'/>, ESqlDataType.<jt:item source='$parameter.java_type'/>, ESqlDataDirection.<jt:item source='$parameter.direction' format='word.class'/>);
</jt:loop>
      function.setReturnType(ESqlDataType.<jt:item source='${$method#Return}.java_type'/>);
      activeConnection().execute(function);
      return function;
   }
</jt:equals>
<jt:equals source='$method.type' value='procedure'>
   /* (non-Javadoc)
    * @see org.mobj.logic.data.I<jt:item source='$package.name' format='class'/>(<jt:loop source='$method#Parameters' alias='parameter'>java.lang.Object<jt:position source='$parameter' type='last' elseValue=', '/></jt:loop>)
    */
   @Override
   public FSqlProcedure <jt:item source='$method.name' format='method'/>(<jt:hasItem source='$method#Parameters' notValue='){'>
<jt:loop source='$method#Parameters' alias='parameter'>
         Object <jt:item source='$parameter.name' format='method'/><jt:position source='$parameter' type='last' value='){' elseValue=','/>
</jt:loop></jt:hasItem>
      FSqlProcedure procedure = new FSqlProcedure("<jt:item source='$method.name'/>");
      procedure.setLogicName(LOGIC_NAME);
<jt:loop source='$method#Parameters' alias='parameter'>
      procedure.createParameter("<jt:item source='$parameter.name'/>", <jt:item source='$parameter.name' format='method'/>, ESqlDataType.<jt:item source='$parameter.java_type'/>, ESqlDataDirection.<jt:item source='$parameter.direction' format='word.class'/>);
</jt:loop>
      activeConnection().execute(procedure);
      return procedure;
   }
</jt:equals>

</jt:loop>

   /* (non-Javadoc)
    * @see org.mobj.logic.data.ICmCityDi(java.lang.Object, java.lang.Object)
    */
   @Override
   public FSqlProcedure doInsert(
         Object logic,
         Object params){
      FSqlProcedure procedure = new FSqlProcedure("Do_Insert");
      procedure.setLogicName(LOGIC_NAME);
      procedure.createParameter("logic_", logic, ESqlDataType.String, ESqlDataDirection.InOut);
      procedure.createParameter("params_", params, ESqlDataType.String, ESqlDataDirection.InOut);
      activeConnection().execute(procedure);
      return procedure;
   }

   /* (non-Javadoc)
    * @see org.mobj.logic.data.ICmCityDi(java.lang.Object, java.lang.Object)
    */
   @Override
   public FSqlProcedure doUpdate(
         Object logic,
         Object params){
      FSqlProcedure procedure = new FSqlProcedure("Do_Update");
      procedure.setLogicName(LOGIC_NAME);
      procedure.createParameter("logic_", logic, ESqlDataType.String, ESqlDataDirection.InOut);
      procedure.createParameter("params_", params, ESqlDataType.String, ESqlDataDirection.InOut);
      activeConnection().execute(procedure);
      return procedure;
   }

   /* (non-Javadoc)
    * @see org.mobj.logic.data.ICmCityDi(java.lang.Object, java.lang.Object)
    */
   @Override
   public FSqlProcedure doSync(
         Object logic,
         Object params){
      FSqlProcedure procedure = new FSqlProcedure("Do_Sync");
      procedure.setLogicName(LOGIC_NAME);
      procedure.createParameter("logic_", logic, ESqlDataType.String, ESqlDataDirection.InOut);
      procedure.createParameter("params_", params, ESqlDataType.String, ESqlDataDirection.InOut);
      activeConnection().execute(procedure);
      return procedure;
   }

   /* (non-Javadoc)
    * @see org.mobj.logic.data.ICmCityDi(java.lang.Object, java.lang.Object)
    */
   @Override
   public FSqlProcedure doDelete(
         Object logic,
         Object params){
      FSqlProcedure procedure = new FSqlProcedure("Do_Delete");
      procedure.setLogicName(LOGIC_NAME);
      procedure.createParameter("logic_", logic, ESqlDataType.String, ESqlDataDirection.InOut);
      procedure.createParameter("params_", params, ESqlDataType.String, ESqlDataDirection.InOut);
      activeConnection().execute(procedure);
      return procedure;
   }

}]]></Source>
</Template>


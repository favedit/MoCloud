<?xml version="1.0" encoding="UTF-8"?>
<Template ads="nEBb4EhA2r2RfQR7XSlSug" name="design.persistence.xmlobject" is_valid="Y" note="M#">
  <Define ads="]E[MIOeUo79dXfu13d2wsA" name="package" is_valid="Y" note="M#" value="org.mobj.mylife.data.base" />
  <Source ads="WkcEiMRQuJETYp5z2XC0pg" is_valid="Y" note="M#"><![CDATA[//============================================================
// <T><jt:item source='$group.label'/>消息定义。</T>
//
// @class
//============================================================
using MO.Common.IO;
using MO.Message.Common;
using MO.Message.Enum;
using MO.Message.Geom;
using MO.Message.Entity;

namespace MO.Message.Message.<jt:item source='$group.full_code'/>
{
   //============================================================
   // <T><jt:item source='$message.label'/>消息。</T>
   //============================================================
   public class F<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/> : FNetMessage
   {
      // 消息名称
      public const string NAME = "<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>";

      // 消息类型
      public const int TYPE = (int)ENetMessageType.<jt:item source='$message.message_type'/>;

      // 消息代码
      public const int CODE = (int)ENetMessageGroup.<jt:item source='$group.full_code'/> + <jt:item source='$message.code_value'/>;

      // 消息版本
      public const int VERSION = <jt:item source='$message.version'/>;
<jt:loop source='$message' alias='enum' filter='$enum:name=Enum'>

      //============================================================
      // <T><jt:item source='$enum.label'/>枚举定义。</T>
      //============================================================
      public enum <jt:item source='$enum.name'/> : int{
<jt:loop source='$enum' alias='field'>
         // <jt:item source='$field.label'/>
         <jt:item source='$field.name'/> = <jt:item source='$field-position'/>,
</jt:loop>
      }
</jt:loop>
<jt:loop source='$message' alias='struct' filter='$struct:name=Struct'>

      //============================================================
      // <T><jt:item source='$struct.label'/>结构定义。</T>
      //============================================================
      public class <jt:item source='$struct.name'/> : INetObject{
<jt:loop source='$struct' alias='field'>

         // <jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
         protected FNetObjects<<jt:item source='$field.lang_type'/>> _<jt:item source='$field.name'/> = new FNetObjects<<jt:item source='$field.lang_type'/>>();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool|Enum|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|DateTime|TimeSpan|String'>
         protected <jt:item source='$field.lang_type'/> _<jt:item source='$field.name'/>;
</jt:equals>
<jt:equals source='$field.type' value='Type|Set|Struct|Object|Bytes'>
         protected <jt:item source='$field.lang_type'/> _<jt:item source='$field.name'/> = new <jt:item source='$field.lang_type'/>();
</jt:equals>
</jt:false>
</jt:loop>
<jt:loop source='$struct' alias='field' filter='$field:name=Item'>

         //============================================================
         // <T>获得<jt:item source='$field.label'/>。</T>
         //
         // @return <jt:item source='$field.label'/>
         //============================================================
<jt:true source='$field.is_collection'>
         public FNetObjects<<jt:item source='$field.type_name'/>> <jt:item source='$field.name' format='upper.first'/>{
            get{ return _<jt:item source='$field.name'/>; }
         }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool|Enum|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|String'>
         public <jt:item source='$field.lang_type'/> <jt:item source='$field.name' format='upper.first'/>{
            get{ return _<jt:item source='$field.name'/>; }
            set{ _<jt:item source='$field.name'/> = value; }
         }
</jt:equals>
<jt:equals source='$field.type' value='Type|Set|Struct|Object'>
         public <jt:item source='$field.lang_type'/> <jt:item source='$field.name' format='upper.first'/>{
            get{ return _<jt:item source='$field.name'/>; }
         }
</jt:equals>
</jt:false>
</jt:loop>

         //============================================================
         // <T>获得数据容量大小。</T>
         //
         // @return 数据容量大小
         //============================================================
         public int Capacity(){
            int capacity = 0;
<jt:loop source='$struct' alias='field' filter='$field:name=Item'>
            // 计算<jt:item source='$field.label'/>大小
<jt:true source='$field.is_collection'>
            capacity += _<jt:item source='$field.name'/>.Capacity();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
            capacity += sizeof(byte);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
            capacity += sizeof(int);
</jt:equals>
<jt:equals source='$field.type' value='Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double'>
            capacity += sizeof(<jt:item source='$field.lang_type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String'>
            capacity += RNetMessage.GetStringCapacity(_<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Type|Set|Struct|Object'>
            capacity += _<jt:item source='$field.name'/>.Capacity();
</jt:equals>
</jt:false>
</jt:loop>
            return capacity;
         }

         //============================================================
         // <T>序列化数据部分。</T>
         //
         // @param bytes 数据缓冲
         //============================================================
         public void Serialize(IOutput output){
<jt:loop source='$struct' alias='field' filter='$field:name=Item'>
            // 序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
            _<jt:item source='$field.name'/>.Serialize(output);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
            output.WriteUint8((byte)(_<jt:item source='$field.name'/> ? 1 : 0));
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
            output.WriteInt32((int)_<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
            output.Write<jt:item source='$field.data_type_cd'/>(_<jt:item source='$field.name'/>.InnerValue);
</jt:equals>
<jt:equals source='$field.type' value='Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|String'>
            output.Write<jt:item source='$field.type'/>(_<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Type|Struct|Object'>
            _<jt:item source='$field.name'/>.Serialize(output);
</jt:equals>
</jt:false>
</jt:loop>
         }

         //============================================================
         // <T>反序列化数据部分。</T>
         //
         // @param bytes 数据缓冲
         //============================================================
         public void Unserialize(IInput input){
<jt:loop source='$struct' alias='field' filter='$field:name=Item'>
            // 反序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
            _<jt:item source='$field.name'/>.Unserialize(input);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
            _<jt:item source='$field.name'/> = (input.ReadUint8() > 0);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
            _<jt:item source='$field.name'/> = (<jt:item source='$field.type_name'/>)input.ReadInt32();
</jt:equals>
<jt:equals source='$field.type' value='Set'>
            _<jt:item source='$field.name'/>.InnerValue = input.Read<jt:item source='$field.data_type_cd'/>();
</jt:equals>
<jt:equals source='$field.type' value='Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|String'>
            _<jt:item source='$field.name'/> = input.Read<jt:item source='$field.type'/>();
</jt:equals>
<jt:equals source='$field.type' value='Type|Struct|Object'>
            _<jt:item source='$field.name'/>.Unserialize(input);
</jt:equals>
</jt:false>
</jt:loop>
         }
      }
</jt:loop>
<jt:loop source='$message' alias='field' filter='$field:name=Item'>

      // <jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
      protected FNetObjects<<jt:item source='$field.lang_type'/>> _<jt:item source='$field.name'/> = new FNetObjects<<jt:item source='$field.lang_type'/>>();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool|Enum|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|DateTime|TimeTick|String'>
      protected <jt:item source='$field.lang_type'/> _<jt:item source='$field.name'/>;
</jt:equals>
<jt:equals source='$field.type' value='Type|Set|Struct|Object|Bytes'>
      protected <jt:item source='$field.lang_type'/> _<jt:item source='$field.name'/> = new <jt:item source='$field.lang_type'/>();
</jt:equals>
</jt:false>
</jt:loop>

      //============================================================
      // <T>构造消息的实例对象。</T>
      //
      // @return 实例对象
      //============================================================
      public F<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>(){
         _head._name = NAME;
         _head._type = TYPE;
         _head._code = CODE;
         _head._version = VERSION;
      }

      //============================================================
      // <T>构造消息的实例对象。</T>
      //
      // @param message 消息对象
      // @return 实例对象
      //============================================================
      public F<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>(FNetMessage message){
         _head._name = NAME;
         _head._type = TYPE;
         _head._code = CODE;
         _head.Assign(message.Head);
         UnserializeData(message.MessageData);
      }
<jt:loop source='$message' alias='field' filter='$field:name=Item'>

      //============================================================
      // <T>获得<jt:item source='$field.label'/>。</T>
      //
      // @return <jt:item source='$field.label'/>
      //============================================================
<jt:true source='$field.is_collection'>
      public FNetObjects<<jt:item source='$field.lang_type'/>> <jt:item source='$field.name' format='upper.first'/>{
         get{ return _<jt:item source='$field.name'/>; }
      }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool|Enum|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|DateTime|TimeSpan|String'>
      public <jt:item source='$field.lang_type'/> <jt:item source='$field.name' format='upper.first'/>{
         get{ return _<jt:item source='$field.name'/>; }
         set{ _<jt:item source='$field.name'/> = value; }
      }
</jt:equals>
<jt:equals source='$field.type' value='Type|Set|Struct|Object|Bytes'>
      public <jt:item source='$field.lang_type'/> <jt:item source='$field.name' format='upper.first'/>{
         get{ return _<jt:item source='$field.name'/>; }
      }
</jt:equals>
</jt:false>
</jt:loop>

      //============================================================
      // <T>获得数据容量大小。</T>
      //
      // @return 数据容量大小
      //============================================================
      public override int CapacityData(){
         int capacity = 0;
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
<jt:true source='$field.is_collection'>
         capacity += _<jt:item source='$field.name'/>.Capacity();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
         capacity += sizeof(byte);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
         capacity += sizeof(int);
</jt:equals>
<jt:equals source='$field.type' value='Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|DateTime|TimeSpan'>
         capacity += sizeof(<jt:item source='$field.lang_type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String'>
         capacity += RNetMessage.GetStringCapacity(_<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Type|Set|Struct|Object|Bytes'>
         capacity += _<jt:item source='$field.name'/>.Capacity();
</jt:equals>
</jt:false>
</jt:loop>
         return capacity;
      }

      //============================================================
      // <T>序列化数据部分。</T>
      //
      // @param bytes 数据缓冲
      //============================================================
      public override void SerializeData(IOutput output){
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
         // 序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
         _<jt:item source='$field.name'/>.Serialize(output);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
         output.WriteUint8((byte)(_<jt:item source='$field.name'/> ? 1 : 0));
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
         output.WriteUint32((uint)_<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
         output.Write<jt:item source='$field.data_type_cd'/>(_<jt:item source='$field.name'/>.InnerValue);
</jt:equals>
<jt:equals source='$field.type' value='Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|DateTime|TimeSpan|String'>
         output.Write<jt:item source='$field.base_type'/>(_<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Type|Struct|Object|Bytes'>
         _<jt:item source='$field.name'/>.Serialize(output);
</jt:equals>
</jt:false>
</jt:loop>
      }

      //============================================================
      // <T>反序列化数据部分。</T>
      //
      // @param bytes 数据缓冲
      //============================================================
      public override void UnserializeData(IInput input){
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
         // 反序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
         _<jt:item source='$field.name'/>.Unserialize(input);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
         _<jt:item source='$field.name'/> = (input.ReadUint8() > 0);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
         _<jt:item source='$field.name'/> = (<jt:item source='$field.lang_type'/>)input.ReadUint32();
</jt:equals>
<jt:equals source='$field.type' value='Set'>
         _<jt:item source='$field.name'/>.InnerValue = input.Read<jt:item source='$field.data_type_cd'/>();
</jt:equals>
<jt:equals source='$field.type' value='Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|DateTime|TimeTick|String'>
         _<jt:item source='$field.name'/> = input.Read<jt:item source='$field.base_type'/>();
</jt:equals>
<jt:equals source='$field.type' value='Type|Struct|Object|Bytes'>
         _<jt:item source='$field.name'/>.Unserialize(input);
</jt:equals>
</jt:false>
</jt:loop>
      }
   }
}
]]></Source>
</Template>

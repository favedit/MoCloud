<?xml version="1.0" encoding="UTF-8"?>
<Template _uuid="uUpzaGEPkNp3dBzx11rRpA" name="database.logicunit.sqlView" is_valid="Y" note="M#">
  <Source _uuid="60]ZbPHhJJ80wmSY2jV0hw" is_valid="Y" note="M#"><![CDATA[package <jt:item source='$dataset.source_package_name'/>;

import org.mo.com.lang.*;
import org.mo.com.collections.*;
import org.mo.com.data.*;
import org.mo.data.logic.*;

//============================================================
// <T><jt:item source='$dataset.label'/>逻辑。</T>
//============================================================
public class <jt:item source='$dataset.source_class_name'/>Logic extends FLogicDataset
{
   // <jt:item source='$dataset.label'/>的定义。
   public final static FLogicTable Table = new FLogicTable("<jt:Item source='$dataset.data_name'/>");

<jt:loop source='$fields' alias='field'>
   // 字段<jt:item source='$field.label'/>的定义。
   public final static FLogicField Field<jt:Item source='$field.data_name' format='class'/> = new FLogicField("<jt:Item source='$field.data_name'/>");

</jt:loop>
   //============================================================
   // <T>构造<jt:item source='$dataset.label'/>逻辑单元。</T>
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Logic(){
   }

   //============================================================
   // <T>构造<jt:item source='$dataset.label'/>逻辑单元。</T>
   //
   // @param connection 链接
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Logic(ISqlConnection connection){
      _connection = connection;
   }

   //============================================================
   // <T>根据编号获得一个数据单元。</T>
   //
   // @param recordId 记录编号
   // @return 数据单元
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit find(long recordId){
      // 检查记录编号
      if(0 == recordId){
         return null;
      }
      // 生成命令
      FSql sql = new FSql("SELECT * FROM ");
      sql.append(Table.name());
      sql.append(" WHERE OUID=");
      sql.append(recordId);
      // 执行命令
      FRow row = _connection.find(sql.toString());
      if(null == row){
         return null;
      }
      // 获得数据
      <jt:item source='$dataset.source_class_name'/>Unit unit = new <jt:item source='$dataset.source_class_name'/>Unit();
      unit.load(row);
      return unit;
   }

   //============================================================
   // <T>根据条件获得一个数据单元。</T>
   //
   // @param whereSql 条件
   // @return 数据单元
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit serach(String whereSql){
      // 生成命令
      FSql sql = new FSql("SELECT * FROM ");
      sql.append(Table.name());
      sql.append(" WHERE ");
      sql.append(whereSql);
      // 执行命令
      FRow row = _connection.find(sql.toString());
      // 获得数据
      if(null == row){
         return null;
      }
      <jt:item source='$dataset.source_class_name'/>Unit unit = new <jt:item source='$dataset.source_class_name'/>Unit();
      unit.load(row);
      return unit;
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件命令
   // @return 数据单元集合
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit[] fetch(String whereSql){
      return fetch(whereSql, null, 0);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件命令
   // @param orderSql 排序命令
   // @return 数据单元集合
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit[] fetch(String whereSql, String orderSql){
      return fetch(whereSql, orderSql, 0);
   }

   //============================================================
   // <T>根据条件获得数据单元集合。</T>
   //
   // @param whereSql 条件命令
   // @param orderSql 排序命令
   // @param limitCount 限制条数
   // @return 数据单元集合
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit[] fetch(String whereSql, String orderSql, int limitCount){
      // 生成命令
      FSql sql = new FSql("SELECT * FROM ");
      sql.append(Table.name());
      if(!RString.isEmpty(whereSql)){
         sql.append(" WHERE ");
         sql.append(whereSql);
      }
      if(!RString.isEmpty(orderSql)){
         sql.append(" ORDER BY ");
         sql.append(orderSql);
      }
      if(limitCount > 0){
         sql.append(" LIMIT ");
         sql.append(limitCount);
      }
      // 执行命令
      FDataset dataset = _connection.fetchDataset(sql.toString());
      int count = dataset.count();
      // 获得数据
      <jt:item source='$dataset.source_class_name'/>Unit[] units = new <jt:item source='$dataset.source_class_name'/>Unit[count];
      for(int n = 0; n < count; n++){
         <jt:item source='$dataset.source_class_name'/>Unit unit = new <jt:item source='$dataset.source_class_name'/>Unit();
         unit.load(dataset.get(n));
         units[n] = unit;
      }
      return units;
   }

   //============================================================
   // <T>根据条件获得全部数据单元集合。</T>
   //
   // @return 数据单元集合
   //============================================================
   public <jt:item source='$dataset.source_class_name'/>Unit[] fetchAll(){
      return fetch(null);
   }

   //============================================================
   // <T>插入一个数据单元。</T>
   //
   // @param unit 数据单元
   // @return 处理结果
   //============================================================
   public boolean doInsert(<jt:item source='$dataset.source_class_name'/>Unit unit){
      // 生成命令
      FSql sql = new FSql("INSERT INTO ");
      sql.append(Table.name());
      sql.append("(");
      sql.append("`OVLD`");
<jt:loop source='$fields' alias='field'>
<jt:notEquals source='$field.data_name' value='OUID|OVLD'>
      sql.append(",`<jt:item source='$field.data_name'/>`");
</jt:notEquals>
</jt:loop>
      sql.append(") VALUES(");
      sql.append(unit.ovld());
<jt:loop source='$fields' alias='field'>
<jt:notEquals source='$field.data_name' value='OUID|OVLD|CREATE_USER_ID|CREATE_DATE|UPDATE_USER_ID|UPDATE_DATE'>
      sql.append(',');
<jt:equals source='$field.type' value='RecordId|Boolean|Integer|Long|Float|Double'>
      sql.append(unit.<jt:item source='$field.data_name' format='method'/>());
</jt:equals>
<jt:equals source='$field.type' value='Date|Time|DateTime'>
      if(unit.<jt:item source='$field.data_name' format='method'/>().isEmpty()){
         sql.append("NULL");
      }else{
         sql.append("STR_TO_DATE('");
         sql.append(unit.<jt:item source='$field.data_name' format='method'/>().format());
         sql.append("','%Y%m%d%H%i%s')");
      }
</jt:equals>
<jt:equals source='$field.type' value='Char|String'>
      if(RString.isEmpty(unit.<jt:item source='$field.data_name' format='method'/>())){
         sql.append("NULL");
      }else{
         sql.append('\'');
         sql.append(_connection.formatValue(unit.<jt:item source='$field.data_name' format='method'/>()));
         sql.append('\'');
      }
</jt:equals>
</jt:notEquals>
</jt:loop>
      sql.append(",0,NOW(),0,NOW())");
      // 执行命令
      long recordId = _connection.executeInsertSql(sql.toString());
      unit.setOuid(recordId);
      return true;
   }

   //============================================================
   // <T>更新一个数据单元。</T>
   //
   // @param unit 数据单元
   // @param recordId 记录编号
   // @return 处理结果
   //============================================================
   public boolean doUpdate(<jt:item source='$dataset.source_class_name'/>Unit unit, long recordId){
      // 检查记录编号
      if(0 == recordId){
         throw new FFatalError("Record id is empty. (record_id={1})", recordId);
      }
      // 生成命令
      FSql sql = new FSql("UPDATE ");
      sql.append(Table.name());
      sql.append(" SET OVLD=");
      sql.append(unit.ovld());
<jt:loop source='$fields' alias='field'>
<jt:notEquals source='$field.data_name' value='OUID|OVLD|}CREATE_USER_ID|CREATE_DATE|UPDATE_USER_ID|UPDATE_DATE'>
      if(unit.is<jt:item source='$field.data_name' format='class'/>Changed()){
         sql.append(",`<jt:item source='$field.data_name'/>`=");
<jt:equals source='$field.type' value='RecordId|Boolean|Integer|Long|Float|Double'>
         sql.append(unit.<jt:item source='$field.data_name' format='method'/>());
</jt:equals>
<jt:equals source='$field.type' value='Date|Time|DateTime'>
         if(unit.<jt:item source='$field.data_name' format='method'/>().isEmpty()){
            sql.append("NULL");
         }else{
            sql.append("STR_TO_DATE('");
            sql.append(unit.<jt:item source='$field.data_name' format='method'/>().format());
            sql.append("','%Y%m%d%H%i%s')");
         }
</jt:equals>
<jt:equals source='$field.type' value='Char|String'>
         if(RString.isEmpty(unit.<jt:item source='$field.data_name' format='method'/>())){
            sql.append("NULL");
         }else{
            sql.append("'");
            sql.append(_connection.formatValue(unit.<jt:item source='$field.data_name' format='method'/>()));
            sql.append("'");
         }
</jt:equals>
      }
</jt:notEquals>
</jt:loop>
      sql.append(",UPDATE_USER_ID=0,UPDATE_DATE=NOW()");
      sql.append(" WHERE OUID=");
      sql.append(recordId);
      // 执行命令
      return _connection.executeSql(sql.toString());
   }

   //============================================================
   // <T>删除一个数据单元。</T>
   //
   // @param recordId 记录编号
   // @return 处理结果
   //============================================================
   public boolean doDelete(long recordId){
      // 生成命令
      FSql sql = new FSql("DELETE FROM ");
      sql.append(Table.name());
      sql.append("WHERE OUID=");
      sql.append(recordId);
      // 执行命令
      return _connection.executeSql(sql.toString());
   }
}
]]></Source>
</Template>

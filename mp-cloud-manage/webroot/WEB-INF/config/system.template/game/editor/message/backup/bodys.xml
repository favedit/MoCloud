<?xml version="1.0" encoding="UTF-8"?>
<Template ads="nEBb4EhA2r2RfQR7XSlSug" name="design.persistence.xmlobject" is_valid="Y" note="M#">
  <Define ads="]E[MIOeUo79dXfu13d2wsA" name="package" is_valid="Y" note="M#" value="org.mobj.mylife.data.base" />
  <Source ads="WkcEiMRQuJETYp5z2XC0pg" is_valid="Y" note="M#"><![CDATA[//============================================================
// <T><jt:item source='$group.label'/>消息类型定义。</T>
//
// @enum
//============================================================
#include "<jt:item source='$group.source_name'/>.h"

MO_NAMESPACE_BEGIN

<jt:loop source='$group' alias='struct' filter='$struct:name=Struct'>
//============================================================
// <T>获得当前结构体的大小。</T>
//
// @return 消息大小
//============================================================
TSize <jt:item source='$struct.name'/>::Capacity(){
   // 序列化消息
   TSize capacity = 0;
<jt:loop source='$struct' alias='field'>
<jt:true source='$field.is_collection'>
   capacity += this-><jt:item source='$field.name'/>.Capacity();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum|Struct'>
   capacity += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   capacity += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   capacity += this-><jt:item source='$field.name'/>.Capacity();
</jt:equals>
</jt:false>
</jt:loop>
   return capacity;
}

//============================================================
// <T>复制指定对象信息到自己内部。</T>
//
// @param value 指定对象
//============================================================
void <jt:item source='$struct.name'/>::Assign(<jt:item source='$struct.name'/>& value){
<jt:loop source='$struct' alias='field'>
<jt:true source='$field.is_collection'>
   this-><jt:item source='$field.name'/>.Assign(value.<jt:item source='$field.name' format='upper.first'/>());
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime|Enum|Struct'>
   this-><jt:item source='$field.name'/> = value.<jt:item source='$field.name' format='upper.first'/>();
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   this-><jt:item source='$field.name'/>.Assign(value.<jt:item source='$field.name' format='upper.first'/>());
</jt:equals>
</jt:false>
</jt:loop>
}

//============================================================
// <T>序列化信息到结构体。</T>
//
// @param pMemory 内存指针
// @param size 内存大小
// @return 序列化后大小
//============================================================
TInt <jt:item source='$struct.name'/>::Serialize(TAny* pMemory){
   // 序列化消息
   TByte* pPtr = (TByte*)pMemory;
   TSize offset = 0;
<jt:loop source='$struct' alias='field'>
   // 序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
   offset += this-><jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = this-><jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = this-><jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   *(T<jt:item source='$field.type'/>*)(pPtr + offset) = this-><jt:item source='$field.name'/>;
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   offset += this-><jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:equals>
</jt:false>
</jt:loop>
   return offset;
}

//============================================================
// <T>反序列化数据流到结构体。</T>
//
// @param pMemory 内存指针
// @param size 内存大小
// @return 序列化后大小
//============================================================
TInt <jt:item source='$struct.name'/>::Unserialize(TAnyC* pMemory){
   // 反序列化消息
   TByteC* pPtr = (TByteC*)pMemory;
   TSize offset = 0;
<jt:loop source='$struct' alias='field'>
   // 反序列化<jt:item source='$field.label'/>
<jt:equals source='$field.type' value='Type|Enum'>
   <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
<jt:empty source='$field.data_size'>
   <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:empty>
<jt:notEmpty source='$field.data_size'>
   offset += <jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:notEmpty>
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   <jt:item source='$field.name'/> = *(T<jt:item source='$field.type'/>*)(pPtr + offset);
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   offset += <jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:equals>
</jt:loop>
   return offset;
}

//============================================================
// <T>获得内部消息。</T>
//
// @return 执行是否成功
//============================================================
TCharC* <jt:item source='$struct.name'/>::Track(TChar* pTrack, TSize capacity, TInt level){
   // 获得当前信息
   TFsTrack track;
<jt:loop source='$struct' alias='field'>
   track.AppendRepeat(MO_DUMP_INDENT, level);
<jt:true source='$field.is_collection'>
   if(<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [empty]\n");
   }else{
<jt:equals source='$field.type' value='Struct'>
      TFsTrack dump;
<jt:empty source='$field.data_size'>
      TInt length = <jt:item source='$field.name'/>.Length();
</jt:empty>
<jt:notEmpty source='$field.data_size'>
      TInt count = <jt:item source='$field.name'/>.Count();
</jt:notEmpty>
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, level + 1);
         track.AppendFormat("[%d]:\n", n);
         track.Append(<jt:item source='$field.name'/>.Get(n).Track(dump.Memory(), dump.Size(), level + 2));
      }
</jt:equals>
<jt:equals source='$field.type' value='Object'>
      TFsTrack dump;
      TInt count = <jt:item source='$field.name'/>.Count();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, level + 1);
         track.AppendFormat("[%d]:\n", n);
         track.Append(<jt:item source='$field.name'/>.Get(n).Track(dump.Memory(), dump.Size(), level + 2));
      }
</jt:equals>
      if(loop < count){
         track.AppendRepeat(MO_DUMP_INDENT, level + 1);
         track.Append("...\n");
      }
   }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Char|Byte|Int8|Int32|Int64|Uint8|Uint32|Uint64|TimeTick|TimeSpan|Enum'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0x%08X(%d)\n", <jt:item source='$field.name'/>, <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Int16|Uint16'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0x%04X(%d)\n", <jt:item source='$field.name'/>, <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Float|Double'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = %f\n", <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='DateTime'>
   if(_<jt:item source='$field.name'/> > 0){
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFsDateTime(<jt:item source='$field.name'/>).Format());
   }else{
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = []\n");
   }
</jt:equals>
<jt:equals source='$field.type' value='String'>
   if(<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0:\"\"\n");
   }else{
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = %d:\"%s\"\n", <jt:item source='$field.name'/>.Length(), <jt:item source='$field.name'/>.MemoryC());
   }
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   track.AppendFormat(" => [<jt:item source='$field.type_name' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='T'/>(<jt:item source='$field.name'/>).Format());
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   track.AppendFormat(" => [<jt:item source='$field.type_name' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='S'/>(<jt:item source='$field.name'/>).Format());
</jt:equals>
</jt:false>
</jt:loop>
   MO_LIB_STRCPY(pTrack, capacity, track.MemoryC());
   return pTrack;
}

</jt:loop>

<jt:loop source='$group' alias='message' filter='$message:name=Message'>
//============================================================
TNetMessageInfo TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::INFO =
   TNetMessageInfo(
      "<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>",
      TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::SIGN,
      TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::SOURCE_TERMINAL,
      TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::TARGET_TERMINAL
   );
<jt:loop source='$message' alias='struct' filter='$struct:name=Struct'>
//============================================================
// <T>获得当前结构体的大小。</T>
//
// @return 消息大小
//============================================================
TSize TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::<jt:item source='$struct.name'/>::Capacity(){
   // 序列化消息
   TSize capacity = 0;
<jt:loop source='$struct' alias='field'>
<jt:true source='$field.is_collection'>
   capacity += this-><jt:item source='$field.name'/>.Capacity();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum|Struct'>
   capacity += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   capacity += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   capacity += this-><jt:item source='$field.name'/>.Capacity();
</jt:equals>
</jt:false>
</jt:loop>
   return capacity;
}

//============================================================
// <T>复制指定对象信息到自己内部。</T>
//
// @param value 指定对象
//============================================================
void TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::<jt:item source='$struct.name'/>::Assign(<jt:item source='$struct.name'/>& value){
<jt:loop source='$struct' alias='field'>
<jt:true source='$field.is_collection'>
   this-><jt:item source='$field.name'/>.Assign(value.<jt:item source='$field.name' format='upper.first'/>());
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime|Enum|Struct'>
   this-><jt:item source='$field.name'/> = value.<jt:item source='$field.name' format='upper.first'/>();
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   this-><jt:item source='$field.name'/>.Assign(value.<jt:item source='$field.name' format='upper.first'/>());
</jt:equals>
</jt:false>
</jt:loop>
}

//============================================================
// <T>序列化信息到结构体。</T>
//
// @param pMemory 内存指针
// @param size 内存大小
// @return 序列化后大小
//============================================================
TInt TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::<jt:item source='$struct.name'/>::Serialize(TAny* pMemory){
   // 序列化消息
   TByte* pPtr = (TByte*)pMemory;
   TSize offset = 0;
<jt:loop source='$struct' alias='field'>
   // 序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
   offset += this-><jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = this-><jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = this-><jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   *(T<jt:item source='$field.type'/>*)(pPtr + offset) = this-><jt:item source='$field.name'/>;
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   offset += this-><jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:equals>
</jt:false>
</jt:loop>
   return offset;
}

//============================================================
// <T>反序列化数据流到结构体。</T>
//
// @param pMemory 内存指针
// @param size 内存大小
// @return 序列化后大小
//============================================================
TInt TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::<jt:item source='$struct.name'/>::Unserialize(TAnyC* pMemory){
   // 反序列化消息
   TByteC* pPtr = (TByteC*)pMemory;
   TSize offset = 0;
<jt:loop source='$struct' alias='field'>
   // 反序列化<jt:item source='$field.label'/>
<jt:equals source='$field.type' value='Type|Enum'>
   <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
<jt:empty source='$field.data_size'>
   <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:empty>
<jt:notEmpty source='$field.data_size'>
   offset += <jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:notEmpty>
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   <jt:item source='$field.name'/> = *(T<jt:item source='$field.type'/>*)(pPtr + offset);
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='String|Object|Types'>
   offset += <jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:equals>
</jt:loop>
   return offset;
}

//============================================================
// <T>获得内部消息。</T>
//
// @return 执行是否成功
//============================================================
TCharC* TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::<jt:item source='$struct.name'/>::Track(TChar* pTrack, TSize capacity, TInt level){
   // 获得当前信息
   TFsTrack track;
<jt:loop source='$struct' alias='field'>
   track.AppendRepeat(MO_DUMP_INDENT, level);
<jt:true source='$field.is_collection'>
   if(<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [empty]\n");
   }else{
<jt:equals source='$field.type' value='Struct'>
      TFsTrack dump;
<jt:empty source='$field.data_size'>
      TInt length = <jt:item source='$field.name'/>.Length();
</jt:empty>
<jt:notEmpty source='$field.data_size'>
      TInt count = <jt:item source='$field.name'/>.Count();
</jt:notEmpty>
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, level + 1);
         track.AppendFormat("[%d]:\n", n);
         track.Append(<jt:item source='$field.name'/>.Get(n).Track(dump.Memory(), dump.Size(), level + 2));
      }
</jt:equals>
<jt:equals source='$field.type' value='Object'>
      TFsTrack dump;
      TInt count = <jt:item source='$field.name'/>.Count();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, level + 1);
         track.AppendFormat("[%d]:\n", n);
         track.Append(<jt:item source='$field.name'/>.Get(n).Track(dump.Memory(), dump.Size(), level + 2));
      }
</jt:equals>
      if(loop < count){
         track.AppendRepeat(MO_DUMP_INDENT, level + 1);
         track.Append("...\n");
      }
   }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Char|Byte|Int8|Int32|Int64|Uint8|Uint32|Uint64|TimeTick|TimeSpan|Enum'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0x%08X(%d)\n", <jt:item source='$field.name'/>, <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Int16|Uint16'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0x%04X(%d)\n", <jt:item source='$field.name'/>, <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Float|Double'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = %f\n", <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='DateTime'>
   if(_<jt:item source='$field.name'/> > 0){
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFsDateTime(<jt:item source='$field.name'/>).Format());
   }else{
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = []\n");
   }
</jt:equals>
<jt:equals source='$field.type' value='String'>
   if(<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0:\"\"\n");
   }else{
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = %d:\"%s\"\n", <jt:item source='$field.name'/>.Length(), <jt:item source='$field.name'/>.MemoryC());
   }
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   track.AppendFormat(" => [<jt:item source='$field.type_name' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='T'/>(<jt:item source='$field.name'/>).Format());
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   track.AppendFormat(" => [<jt:item source='$field.type_name' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='S'/>(<jt:item source='$field.name'/>).Format());
</jt:equals>
</jt:false>
</jt:loop>
   MO_LIB_STRCPY(pTrack, capacity, track.MemoryC());
   return pTrack;
}

</jt:loop>

//============================================================
// <T>获得消息的描述。</T>
//
// @return 消息描述
//============================================================
TNetMessageInfo* TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::MessageInfo(){
   return &INFO;
}

//============================================================
// <T>获得当前消息的大小。</T>
//
// @return 消息大小
//============================================================
TSize TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::CapacityData(){
   TSize capacity = 0;
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
<jt:true source='$field.is_collection'>
   capacity += _<jt:item source='$field.name'/>.Capacity();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum|Struct'>
   capacity += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   capacity += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String|Object|Types'>
   capacity += _<jt:item source='$field.name'/>.Capacity();
</jt:equals>
</jt:false>
</jt:loop>
   return capacity;
}

//============================================================
// <T>序列化数据部分到内部数据区。</T>
//
// @return 处理结果
//============================================================
TBool TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::DoSerializeData(){
   _netDataLength = SerializeData(_netData);
   return ETrue;
}

//============================================================
// <T>从内部数据区反序列化数据部分。</T>
//
// @return 处理结果
//============================================================
TBool TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::DoUnserializeData(){
   _netDataLength = UnserializeData(_netData);
   return ETrue;
}

//============================================================
// <T>序列化数据部分到数据流。</T>
//
// @param pMemory 内存指针
// @return 序列化后大小
//============================================================
TInt TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::SerializeData(TAny* pMemory){
   MO_ASSERT(pMemory);
   // 序列化消息
   TByte* pPtr = (TByte*)pMemory;
   TSize offset = 0;
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
   // 序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
   offset += _<jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum|Struct'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = _<jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   *(T<jt:item source='$field.type'/>*)(pPtr + offset) = _<jt:item source='$field.name'/>;
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String|Object|Types'>
   offset += _<jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:equals>
</jt:false>
</jt:loop>
   return offset;
}

//============================================================
// <T>反序列化数据部分流到信息。</T>
//
// @param pMemory 内存指针
// @return 反序列化后大小
//============================================================
TInt TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::UnserializeData(TAnyC* pMemory){
   MO_ASSERT(pMemory);
   // 反序列化消息头信息
   TByteC* pPtr = (TByteC*)pMemory;
   TSize offset = 0;
   // 检查消息类型
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
   // 反序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
   offset += _<jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum|Struct'>
<jt:empty source='$field.data_size'>
   _<jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:empty>
<jt:notEmpty source='$field.data_size'>
   offset += _<jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:notEmpty>
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   _<jt:item source='$field.name'/> = *(T<jt:item source='$field.type'/>*)(pPtr + offset);
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String|Object'>
   offset += _<jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:equals>
</jt:false>
</jt:loop>
   return offset;
}

//============================================================
// <T>重置信息。</T>
//
// @return 执行是否成功
//============================================================
void TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::Reset(){
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
<jt:true source='$field.is_collection'>
   _<jt:item source='$field.name'/>.Reset();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   _<jt:item source='$field.name'/> = 0;
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String'>
   _<jt:item source='$field.name'/>.Reset();
</jt:equals>
</jt:false>
</jt:loop>
}

//============================================================
// <T>获得内部消息。</T>
//
// @return 执行是否成功
//============================================================
TCharC* TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::TrackData(TChar* pTrack, TSize capacity){
   TFsTrack track;
   // 获得当前信息
<jt:loop source='$message' alias='field' filter='$field:name=Item'>
<jt:true source='$field.is_collection'>
   if(_<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [empty]\n");
   }else{
<jt:equals source='$field.type_name' value='TInt16|TInt32'>
      TInt count = _<jt:item source='$field.name'/>.Length();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, 1);
         track.AppendFormat("[%d]: %u\n", n, _<jt:item source='$field.name'/>.Get(n));
      }
</jt:equals>
<jt:equals source='$field.type_name' value='TUint16|TUint32'>
      TInt count = _<jt:item source='$field.name'/>.Length();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, 1);
         track.AppendFormat("[%d]: %u\n", n, _<jt:item source='$field.name'/>.Get(n));
      }
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
      TFsTrack dump;
<jt:empty source='$field.data_size'>
      TInt count = _<jt:item source='$field.name'/>.Length();
</jt:empty>
<jt:notEmpty source='$field.data_size'>
      TInt count = _<jt:item source='$field.name'/>.Count();
</jt:notEmpty>
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, 1);
         track.AppendFormat("[%d]:\n", n);
         track.Append(_<jt:item source='$field.name'/>.Get(n).Track(dump.Memory(), dump.Size(), 2));
      }
</jt:equals>
<jt:equals source='$field.type' value='Object'>
      TFsTrack dump;
      TInt count = _<jt:item source='$field.name'/>.Count();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n<loop; n++){
         track.AppendRepeat(MO_DUMP_INDENT, 1);
         track.AppendFormat("[%d]:\n", n);
         track.Append(_<jt:item source='$field.name'/>.Get(n).Track(dump.Memory(), dump.Size(), 2));
      }
</jt:equals>
      if(loop < count){
         track.AppendRepeat(MO_DUMP_INDENT, 1);
         track.Append("...\n");
      }
   }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Char|Byte|Int8|Int32|Int64|Uint8|Uint32|Uint64|TimeTick|TimeSpan|Enum'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0x%08X(%d)\n", _<jt:item source='$field.name'/>, _<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Int16|Uint16'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0x%04X(%d)\n", _<jt:item source='$field.name'/>, _<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Float|Double'>
   track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>< jt:item source='$field.name'/> ] = %f\n", _<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='DateTime'>
   if(_<jt:item source='$field.name'/> > 0){
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFsDateTime(_<jt:item source='$field.name'/>).Format());
   }else{
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = []\n");
   }
</jt:equals>
<jt:equals source='$field.type' value='Bytes'>
   if(_<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => <jt:item source='$field.name'/> = []\n");
   }else{
      TFsTrack track;
      _<jt:item source='$field.name'/>.Track(track.Memory(), track.Size());
      track.AppendFormat(" => <jt:item source='$field.name'/> = [%s]\n", (TCharC*)track);
   }
</jt:equals>
<jt:equals source='$field.type' value='String'>
   if(_<jt:item source='$field.name'/>.IsEmpty()){
      track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = 0:\"\"\n");
   }else{
      track.AppendFormat(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/> = %d:\"%s\"\n", _<jt:item source='$field.name'/>.Length(), _<jt:item source='$field.name'/>.MemoryC());
   }
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   track.AppendFormat(" => [<jt:item source='$field.type_name' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='T'/>(_<jt:item source='$field.name'/>).Format());
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   track.AppendFormat(" => [<jt:item source='$field.type_name' rpad='12'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='S'/>(_<jt:item source='$field.name'/>).Format());
</jt:equals>
<jt:equals source='$field.type' value='Object'>
   track.Append(" => [<jt:item source='$field.type' rpad='12'/>] <jt:item source='$field.name'/>\n");
   TFsTrack <jt:item source='$field.name'/>Dump;
   track.Append(_<jt:item source='$field.name'/>.Track(<jt:item source='$field.name'/>Dump.Memory(), <jt:item source='$field.name'/>Dump.Size(), 1));
</jt:equals>
</jt:false>
</jt:loop>
   MO_LIB_STRCPY(pTrack, capacity, (TCharC*)track);
   return pTrack;
}

</jt:loop>

//============================================================
// <T>获得消息名称。</T>
//
// @class
//============================================================
TCharC* RNm<jt:item source='$group.full_code'/>Message::CodeName(TInt code){
   switch(code){
<jt:loop source='$group' alias='message' filter='$message:name=Message'>
      case ENetMessage_<jt:item source='$message.source_type'/>2<jt:item source='$message.target_type'/>_<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>:{
         return "<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>";
      }
</jt:loop>
   }
   return "";
}

//============================================================
// <T>获得消息信息。</T>
//
// @class
//============================================================
TNetMessageInfo* RNm<jt:item source='$group.full_code'/>Message::CodeInfo(TInt code){
   switch(code){
<jt:loop source='$group' alias='message' filter='$message:name=Message'>
      case ENetMessage_<jt:item source='$message.source_type'/>2<jt:item source='$message.target_type'/>_<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>:{
         return &TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>::INFO;
      }
</jt:loop>
   }
   return NULL;
}

//============================================================
// <T>获得消息内部信息。</T>
//
// @class
//============================================================
TCharC* RNm<jt:item source='$group.full_code'/>Message::DumpData(TNetMessage* pMessage, TChar* pTrack, TSize capacity){
   TInt code = pMessage->MessageHead().Code();
   switch(code){
<jt:loop source='$group' alias='message' filter='$message:name=Message'>
      case ENetMessage_<jt:item source='$message.source_type'/>2<jt:item source='$message.target_type'/>_<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/>:{
         TNm<jt:item source='$group.code'/><jt:item source='$message.code'/><jt:item source='$message.message_type'/> message = pMessage;
         return message.TrackData(pTrack, capacity);
      }
</jt:loop>
   }
   return pTrack;
}

MO_NAMESPACE_END

]]></Source>
</Template>

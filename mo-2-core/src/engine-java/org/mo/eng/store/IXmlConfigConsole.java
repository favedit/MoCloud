/*
 * @(#)IXmlConfigConvert.java
 *
 * Copyright 2008 microbject, All Rights Reserved.
 *
 */
package org.mo.eng.store;

import org.mo.com.xml.EXmlConfigCopy;
import org.mo.com.xml.IXmlObject;

//============================================================
// <T>XML数据集合。</T>
//============================================================
public interface IXmlConfigConsole<V extends IXmlObject>
      extends
         IXmlConfigConvert
{
   //============================================================
   // <T>根据名称查找一个配置对象。</T>
   //
   // @param name 名称
   // @return 配置对象
   //============================================================
   FXmlConfig findConfig(String name);

   //============================================================
   // <T>查找指定名称的配置对象。</T>
   //
   // @param name 名称
   // @return 配置对象
   //============================================================
   V find(String name);

   //============================================================
   // <T>获得指定名称的配置对象。</T>
   // <P>配置对象不存在时产生例外。</P>
   //
   // @param name 名称
   // @return 配置对象
   //============================================================
   V get(String name);

   //============================================================
   // <T>列出所有的配置描述集合。</T>
   //
   // @return 配置描述集合
   //============================================================
   FXmlConfigMeta[] listMetas();

   //============================================================
   // <T>列出所有的配置集合。</T>
   //
   // @return 配置集合
   //============================================================
   V[] list();

   //============================================================
   // <T>新建一个数据对象。</T>
   //
   // @param xobject 数据对象
   //============================================================
   void persist(V xobject);

   //============================================================
   // <T>存储一个数据对象。</T>
   //
   // @param xobject 数据对象
   //============================================================
   void store(V xobject);

   //============================================================
   // <T>删除一个数据对象。</T>
   //
   // @param xobject 数据对象
   //============================================================
   void remove(V xobject);

   //============================================================
   // <T>深层复制一个XML对象内容到另一个XML对象。</T>
   //
   // @param copyCd 复制模式
   // @param xsource 源XML对象
   // @param xtarget 目标XML对象
   // @param property 依赖属性名
   //============================================================
   void deepCopy(EXmlConfigCopy copyCd,
                 IXmlObject xsource,
                 IXmlObject xtarget,
                 String property);
}

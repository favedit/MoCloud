package org.mo.com.lang.generic;

//============================================================
// <T>名称和内容成对的对象。</T>
//
// @history 130220 创建
//============================================================
public class FPair<N, V>
      implements
         IPair<N, V>
{
   // 迭代器接口
   protected IPairIterator _iterator;

   // 名称对象
   protected N _name;

   // 内容对象
   protected V _value;

   //============================================================
   // <T>构造名称和内容成对的对象。</T>
   //============================================================
   public FPair(){
   }

   //============================================================
   // <T>关联迭代器。</T>
   //
   // @param iterator 迭代器
   //============================================================
   public void link(IPairIterator iterator){
      _iterator = iterator;
   }

   //============================================================
   // <T>获得总数。</T>
   //
   // @return 总数
   //============================================================
   @Override
   public int count(){
      return _iterator.count();
   }

   //============================================================
   // <T>获得位置。</T>
   //
   // @return 位置
   //============================================================
   @Override
   public int position(){
      return _iterator.position();
   }

   //============================================================
   // <T>判断是否开始位置。</T>
   //
   // @return 是否开始
   //============================================================
   @Override
   public boolean isFirst(){
      return _iterator.isFirst();
   }

   //============================================================
   // <T>判断是否结束位置。</T>
   //
   // @return 是否结束
   //============================================================
   @Override
   public boolean isLast(){
      return _iterator.isLast();
   }

   //============================================================
   // <T>获得名称。</T>
   //
   // @return 名称
   //============================================================
   public N name(){
      return _name;
   }

   //============================================================
   // <T>获得内容。</T>
   //
   // @return 内容
   //============================================================
   public V value(){
      return _value;
   }

   //============================================================
   // <T>设置名称和内容。</T>
   //
   // @param name 名称
   // @param value 内容
   //============================================================
   public void set(N name,
                   V value){
      _name = name;
      _value = value;
   }

   //============================================================
   // <T>获得内容字符串。</T>
   //
   // @return 字符串
   //============================================================
   public String toString(){
      return _name + "=" + _value;
   }
}

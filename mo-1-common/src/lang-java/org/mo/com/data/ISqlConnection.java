package org.mo.com.data;

import java.sql.Connection;
import org.mo.com.collections.FDataset;
import org.mo.com.collections.FObjectDictionary;
import org.mo.com.collections.FRow;

//============================================================
// <T>数据库链接接口。</T>
//
// @author MAOCY
//============================================================
public interface ISqlConnection
      extends
         ISqlConnect
{
   //============================================================
   // <T>获得数据库类型。</T>
   //
   // @return 数据库类型
   //============================================================ 
   String databaseType();

   //============================================================
   // <T>获得属性集合。</T>
   //
   // @return 属性集合
   //============================================================ 
   FObjectDictionary attributes();

   //============================================================
   // <T>获得本地链接。</T>
   //
   // @return 本地链接
   //============================================================ 
   Connection sqlConnection();

   //============================================================
   // <T>获得数据库链接的描述对象。</T>
   //
   // @return 描述对象
   //============================================================ 
   ISqlConnectionMeta meta();

   //============================================================
   // <T>设置最大获取限制。</T>
   //
   // @param flag 限制
   //============================================================ 
   void setMaxLimit(boolean flag);

   //============================================================
   // <T>设置最大获取总数。</T>
   //
   // @param count 总数
   //============================================================ 
   void setMaxFetch(int count);

   //============================================================
   // <T>选择存储。</T>
   //
   // @param name 名称
   //============================================================ 
   void selectStorage(String name);

   //============================================================
   // <T>开始事务。</T>
   //
   // @return 处理结果
   //============================================================ 
   boolean beginTransaction();

   //============================================================
   // <T>提交事务。</T>
   //
   // @return 处理结果
   //============================================================ 
   boolean commit();

   //============================================================
   // <T>回滚当前链接的所有内容。</T>
   //
   // @return 处理结果
   //============================================================ 
   boolean rollback();

   //============================================================
   // <T>格式化字符串为命令内容。</T>
   //
   // @param value 内容
   // @return 命令内容
   //============================================================
   public String formatValue(String value);

   //============================================================
   // <T>根据一条SQL命令执行结果，获得数据描述资源。</T>
   //
   // @param sql SQL命令
   // @return 数据描述资源
   //============================================================ 
   FSqlDatasetMeta fetchMeta(CharSequence sql);

   //============================================================
   // <T>获得一个表的数据描述资源。</T>
   //
   // @param table 表名称
   // @return 数据描述资源
   //============================================================ 
   FSqlDatasetMeta fetchTableMeta(String table);

   //============================================================
   // <T>执行一条SQL命令，返回新建的记录编号。</T>
   // <P>执行中不解析字符。(如{}中的内容)。</P>
   //
   // @param sql 命令
   // @return 记录编号
   //============================================================ 
   long executeInsertSql(CharSequence sql);

   //============================================================
   // <T>执行一条SQL命令，返回执行结果。</T>
   // <P>执行中不解析字符。(如{}中的内容)。</P>
   //
   // @param sql 命令
   // @return 处理结果
   //============================================================ 
   boolean executeSql(CharSequence sql);

   //============================================================
   // <T>执行命令，查询是否有结果集。</T>
   //
   // @param sql 命令
   // @return 是否有结果集
   //============================================================ 
   boolean executeExist(CharSequence sql);

   //============================================================
   // <T>执行查询，并返回查询所返回的结果集中第一行的第一列。</T>
   // <P>忽略其他列或行。</P>
   //
   // @param sql 命令
   // @return 字符串
   //============================================================ 
   String executeScalar(CharSequence sql);

   //============================================================
   // <T>执行查询，并返回查询所返回的结果集中第一行的第一列的整数</T>
   // <P>忽略其他列或行。</P>
   //
   // @param sql 命令
   // @return 整数
   //============================================================ 
   int executeInteger(CharSequence sql);

   //============================================================
   // <T>执行查询，并返回查询所返回的结果集中第一行的第一列的长整数</T>
   // <P>忽略其他列或行。</P>
   //
   // @param sql 命令
   // @return 长整数
   //============================================================ 
   long executeLong(CharSequence sql);

   //============================================================
   // <T>执行多条SQL命令，返回执行结果。</T>
   // <P>执行中不解析字符。(如{}中的内容)。</P>
   // <P>SQL命令间使用分号或回车符进行分割。</P>
   //
   // @param sql 命令
   // @return 处理结果
   //============================================================ 
   void executeSqls(CharSequence sql);

   //============================================================
   // <T>执行命令，返回执行数据单元。</T>
   //
   // @param sql 命令
   // @return 数据单元
   //============================================================ 
   FRow find(CharSequence sql);

   //============================================================
   // <T>执行SQL命令，返回执行结果集。</T>
   //
   // @param sql 命令
   // @return 结果集
   //============================================================ 
   FDataset fetchDataset(CharSequence sql);

   //============================================================
   // <T>执行SQL命令，返回执行结果集。</T>
   // <P>
   //    数据按照PageSize大小进行分页，选取指定页号的数据。<B/>
   //    如果PageSize为负数，选取全部数据。<B/>
   //    如果Page为-1，选取最后一页数据。<B/>
   //    如果Page范围不在选取范围内，选取空数据集。
   // </P>
   //
   // @param sql 命令
   // @param pageSize 分页大小
   // @param page 页号
   // @return 结果集
   //============================================================ 
   FDataset fetchDataset(CharSequence sql,
                         int pageSize,
                         int page);

   //============================================================
   // <T>根据条件，获取一个表中的数据。</T>
   //
   // @param table 表名称
   // @param fields 字段集合（用“,”分隔）
   // @param search 搜索条件
   // @param orderBy 排序条件
   // @param pageSize 分页大小
   // @param page 页号
   // @return 结果集
   //============================================================ 
   FDataset fetchTable(String table,
                       String fields,
                       String search,
                       String orderBy,
                       int pageSize,
                       int page);

   //============================================================
   // <T>执行SQL命令，返回执行结果的读取器。</T>
   //
   // @param sql SQL命令
   // @return 结果的读取器
   //============================================================ 
   ISqlDatasetReader fetchReader(CharSequence sql);

   //============================================================
   // <T>执行一个函数命令。</T>
   //
   // @param function 函数命令
   //============================================================ 
   void execute(FSqlFunction function);

   //============================================================
   // <T>执行一个存储过程。</T>
   //
   // @param procedure 存储过程
   //============================================================ 
   void execute(FSqlProcedure procedure);

   //============================================================
   // <T>重置链接内容。</T>
   //============================================================ 
   void reset();

   //============================================================
   // <T>关闭当前链接，提交所有内容。</T>
   //============================================================ 
   void close();
}
